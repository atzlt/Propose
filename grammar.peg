---
// deno-lint-ignore-file

import * as ast from "./ast.ts";
---

File := NewLine? head=FileLine tail=FileLineTail* NewLine? $
    .lines = ast.AstFileLine[] { return [head.val].concat(tail.map((arg, _) => arg.val)); }
FileLine := WS? ln={Draw | Decl | ConfigLine | SaveFile} WS? .val = ast.AstFileLine { return ln.val; }
FileLineTail := NewLine ln=FileLine .val = ast.AstFileLine { return ln.val; }

Decl := l=DeclLeft WS? '=' WS? r={Expr | Coord}
    .val = ast.AstDecl { return { kind: "decl", tar: l.val, val: r.val } }
DeclLeft := tar={Destruct | Direct} .val = ast.AstDeclLeft { return tar.val; }
Destruct := tar1={PointID | CommonID} WS? ',' WS? tar2={PointID | CommonID}
    .val = ast.AstDestruct { return { kind: "destruct", tar1: tar1.val, tar2: tar2.val } }
Direct := tar={PointID | CommonID}
    .val = ast.AstDirect { return { kind: "direct", tar: tar.val }; }

Expr := meth=Method WS head=Arg tail=ArgTail* WS?
    .val = ast.AstExpr {
        return {
            method: meth.val,
            args: [head.val].concat(tail.map((arg, _) => arg.val)),
        }
    }
Method := name='[A-Za-z0-9\'!@#%^*]+' .val = string { return name; }
Arg := arg={Triangle | Line2P | Circle3P | CircleOR | CircleOA | PointID | CommonID | Number}
    .val = ast.AstArg { return arg.val; }
ArgTail := WS? ',' WS? arg=Arg
    .val = ast.AstArg { return arg.val; }

Coord := c={RightCoord | PolarCoord} .val = ast.AstCoord { return c.val; }
RightCoord := '\(' WS? x=RNumber WS? ',' WS? y=RNumber WS? '\)'
    .val = ast.AstCoord { return { x: x.val, y: y.val }; }
PolarCoord := '\(' WS? r=RNumber WS? ':' WS? a=Number WS? '\)'
    .val = ast.AstCoord { return {
        x: r.val * Math.cos(a.val),
        y: r.val * Math.sin(a.val)
    }; }

Draw := 'draw' WS head=DrawStep tail=DrawStepTail*
    .val = ast.AstDraw { return {
        kind: "draw",
        steps: [head.val].concat(tail.map((arg, _) => arg.val)),
    }; }
DrawStep := step={Line2P | Circle3P | CircleOR | CircleOA | PointID | CommonID} WS? conf=DrawConfig?
    .val = ast.AstDrawStep { return {
        step: step.val,
        conf: conf ? conf.val : [],
    }; }
DrawStepTail := WS? ',' WS? step=DrawStep
    .val = ast.AstDrawStep { return step.val; }
DrawConfig := '\[' WS? head=Config tail=ConfigTail* WS? '\]'
    .val = ast.AstConfig[] { return [head.val].concat(tail.map((arg, _) => arg.val)) }

ConfigLine := 'config' WS head=Config tail=ConfigTail*
    .val = ast.AstConfigLine { return {
        kind: "config",
        confs: [head.val].concat(tail.map((arg, _) => arg.val)),
    }; }
Config := conf='[A-Za-z_]+' WS? '=' WS? value='[A-Za-z0-9-_]*'
    .val = ast.AstConfig {
        if (value.endsWith("deg")) value = (parseFloat(value) * Math.PI / 180).toString();
        return { conf, value }
    }
ConfigTail := WS? ',' WS? step=Config
    .val = ast.AstConfig { return step.val; }

SaveFile := 'save' WS path='[^\n\r]+'
    .val = ast.AstSaveFile { return { kind: "save", path }; }

Line2P := a=PointID b=PointID
    .val = ast.AstLine2P { return { kind: "line2p", a: a.val, b: b.val } }
Triangle := a=PointID b=PointID c=PointID
    .val = ast.AstTriangle { return { kind: "trig", a: a.val, b: b.val, c: c.val } }
CircleOR := '\(' WS? o=PointID WS? ',' WS? r={CommonID | RNumber} WS? '\)'
    .val = ast.AstCircleOR { return { kind: "or", center: o.val, radius: r.val }; }
CircleOA := '\(' WS? o=PointID WS? ',' WS? a=PointID WS? '\)'
    .val = ast.AstCircleOA { return { kind: "oa", center: o.val, thru: a.val }; }
Circle3P := '\(' WS? a=PointID WS? b=PointID WS? c=PointID WS? '\)'
    .val = ast.AstCircle3P { return { kind: "o3p", a: a.val, b: b.val, c: c.val }; }

PointID := name='[A-Z][a-z0-9\']*' .val = string { return name; }
CommonID := name='[a-z_][a-z0-9\']*'  .val = string { return name; }
Number := num={Degree | RNumber} .val = number { return num.val; }
RNumber := num='-?\d+(\.\d+)?' .val = number { return parseFloat(num); }
Degree := num=RNumber 'deg' .val = number { return num.val * Math.PI / 180; }
WS := '[ \t]+'
NewLine := '[\n\r]+'
